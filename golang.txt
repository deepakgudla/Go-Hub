GO
GO is a statically typed and compiled programming language
---------
go build - builds the executable file (.exe) can run it as ./filename.exe
go run - builds executable and runs it
---------
***
go term for threads --> goroutine
everything in GO is pass by value..
in go values can be of more than one type
go provides built in functions to convert between strings and byte slices
***
Types in GO
  strings
  Bool
  Integer 
  	uint - unsigned integers --> cannot have -ve integers - [uint, uint8, uint16, uint32, uint64, uintptr]
  	int - both -ve & +ve integers -- [int, int8, int16, int32, int64]
  	uintpr - to hold the bit pattern of any pointer
  float
	float32
	float64
  complex ?
	complex numbers of imaginary values iota [i] etc...

**specification types in golang
. boolean
. numeric
. string
. array
. slice
. struct
. pointer
. function
. interface
. map
. channel

-----STRINGS-----
- represents a sequence of characters
- immutable type
- cannot modify individual characters within a string
- string values are always interpreted as UTF-8 encoded unicode text

-----BYTES----
- slice of bytes
- each element represents a single byte
- mutable type
- can modify individual bytes within a byte slice
- can be used to represent binary data or text in various encodings

***string to byte conversion
str = "go"
byte := []byte(str)

*byte to string conversion
 bytes := []byte{1,3,5,7}
 str := string(bytes)
*
converting between strings and slices involves encoding and decoding operations..
and should be handled correctly

*byte buffer
	
	provides a way to maniulatr in memory byte buffers
	purpose is to provide a flexible and efficient way to work with sequence of bytes
	offers methods/functions such as:
		appending data
		reading data
		resizing the buffer
		converting buffer content to different types(str, int, etc....)
	a region of memory used to temporarily store a sequence of bytes
	provides a data structure for efficient manipulation of byte data
	allows to read and write bytes to and from the buffer
	used in scenarios to manipulate sequences of bytes efficiently
	serves as a temporary storage for byte data and enables operations such as :
		reading
		writing
		appending
		resizing byte sequences
	useful for tasks like:
		data serialization
		network communication
		file I/O
		efficient string manipulation
*




--------ARRAYS-----------
- static
- numbered sequence of elements of the same type
- does not change in size
- used for go internals...( ? )
> mostly used as a building block in the go

---------SLICES--------------
- descriptor of an array segment
	 includes pointer to the array
	 length of the segment
	 capacity(max length of the segment)
- dynamic
- built on top of an array
- holds values of the same type
- changes in size
- has a length and capacity..
- composite literals (?) are used to create a slice
- composite literal is created by having the type followed by curly braces and then putting the appropriate values in he curly brace area..

--------MAPS---------
- key value storage
- an ordered group of values of one type called the element type indexed by a set of unique keys of another type called the key type (k,v)
- powerful data structure that associates value of one type (key) with the value of another type (value)
- unordered collection of key value pairs

---------STRUCTS----------
- a data structure
- a composite data type
- allows us to compose together values of different types
#embedded structs
take one struct and embed it in another struct. when we do this inner type gets promoted to the outer type
#anonymous struct
an anonymous struct is a struct which is not associated with a specific identifier..
#composition 
~ to inheritance in OOPs
composition refers to a way of strcuturing and building complex types by combining multiple types which are simple
- it is one of the OOPs programming and allows to create flexible and readable code
- composition can be done by embedding one struct type within another
- fields and methods of embedded inner struct becomes accesiible to the outer struct
inner type can be used by outer type
methods of inner type can also be accessed by the outer type
GO DOESN'T HAVE A built-in INHERITANCE MECHANISM
- composition provides a way to create relationships between different types without the need for traditional inheritance
we create TYPEs in GO
user defined types
	values fo that type
	can assign values of a user defined type to variables
##GO is object oriented
1. ENCAPSULATION
	state (fields)
	behaviour(methods)
	exported/unexported --> viewable/not-viewable
2. REUSABILITY
	inheritance(embedded types(struct,slice,map))
3. POLYMORPHISM
	ability of a value of a certain type to also be of another type
	ability of an object to be of an additional type and take on different behaviours
	allows values of different types to be treated as instances of a common type
	inheritances
4. OVERRIDING
	promotion???
--------
in traditional OOPs there will be classes(ds describing a type of obj)
in wihch we can create instances/objects from the class and 
these classes can hold state/data/fields and behaviour/methods and 
these can be public/private and also there will be in inheritance
But in GO
we create types; we dont create classes
we dont instantiate but create a value of a type
-- we can declare a new type
* Anonymous types - -L126
	- indeterminate
$padding & architectural
convention:
logically organize fields
readability and clarity trumps performance as a design concern
if a position occurs to prioritize performace,
lay the fields out from largest to smallest eg: int64, float32, bool

*int - pointer to int
--------POINTERS--------
- type of data that refers to or points to the location in memory of a value
- go has several reference types including
	pointers
	slices
	maps
	channels
	functions
	INTERFACES
-
- holds the memory address of a value
- allows to directly access and modify the memory location of a value
can also be called as reference types.
pointers pass the memory address of the variable
direct reference to the memory address
pointer is a memory address
every location in a pointer has an address
all values are stored in memory
pointers refers to a variable that holds the memory address.
**pointers allows us to directly manipulate memory and vuild complex data structures..
 improper usage of pointers can lead to bugs and errors..
* fundamental operations involving pointers..
	address operator ( & ) --> gives the address 
		this operator is used to get the memory address of the var
		eg : if x := 1357 &X will give a pointer to 1357 , it is basically a memory address where the value 1357 is stored...
	dereferencing operator ( * ) --> gives the value/reference at/to memory address
		this operator is used to get the value stored at a memory address
		eg: if a is a pointer to an integer(1357) then *a gives the integer that a points to..
		if a var is a ptr to something, which is an address, a reference to some address,
		where a value is stored, we can see the value a that address using  asterisk ( * )
*
POINTER itself is passed by value(fn gets a copy of the address) but the data it points to is same
dereferencing(* ) the pointer and modifying the value it points to inside the function will modify the original value 
In go all data is passed by value, i.e whenever we pass data to a function, 
go creates a copy of that data and assigns the copy to a parameter var
the function can do whatever it wants to copy without affecting the original data

immutable data types like float str int etc are safe from ptrs?... 
when passed by value any changes made in this function wont affect the original value..

IN GO EVERYTHING IS PASSED BY VALUE


mutable --> value that can be changed
in go slices maps and pointers are mutable types
even though slices maps and pointers are passed by value they still behave as if they are passed by reference
because the value that is copied and passed is the reference to the underlying data
for mutable types 
the value that passed includes a reference to the underlying data (which is why changes made inside the function are visible outside to it)
*
WHEN WE ASSIGN A REFERENCE TYPE TO ANOTHER VARIABLE, 
THE NEW VARIABLE REFERENCES THE SAME MEMORY LOCATION..

VALUE SEMANTICS
when the actual data of a variable is passed to a function or assigned to another variable which means
new var or function parameter gets a completely independent copy of the data
value semantics does not involve shared state

value semantics - stack
pointer semantics - heap

if a type goes with value semantics for receivers, all receivers for that type should be value receivers
if a type goes with value pointer for receivers, all receivers for that type should be pointer receivers

escapes to heap ---> var shared between main and  Println()
moved to heap ---> variable moved to heap..

------METHOD-SETS------ 
set of methods attached to a type.
key to go interface mechanism
associated with both value and pointer types...
the idea of method set is integral to how interfaces are implemented and used in go
interface in go defines a method set
interface in go defines a method set any type whose method set is a superset of interface method is considered to implement the interface
* method set of type T consists of all methods with receiver type T
	called using var of type T
* method set of type *T consists of all methods with receiver *T or T
	called using var of type *T
	can call all methods of corresponding non pointer type as well
* 
a method is nothing more than a function attached to  type.
when a func is attached to a type, it becomes method of that type

-------FUNCTIONS--------
- can be assigned to variables
- can be passed as arguments to other functions
- can be returned as values from other functions
- when a function is assigned to a variable, the variable stores a reference to the function
syntax - 
	func (receiver) identifier (parameters) (returns) {}
	func - keyword
	receiver - type of method
	identifier - name of the function
Sprint - prints the string
* variadic parameter
	a function which takes unlimited number of arguments is a variadic parameter

parameters & arguments	
	define func with parameters (if any)
	call our func and pass in arguments
types	
	no params, no returns
	1 param no returns	
	1 param, 1 return
	2 params, 2 returns

CHANNELS
- channels are used for communication between goroutines
- channels allows to pass data from one goroutine to another
- better way for synchronizing code and writing concurrent code

Buffer channel	
	channel that will allow certain values to be in the channel 
	regardless of whether or not something is ready  pull off
-

INTERFACES
- interface type represents method signatures
- provides a way to specify the behaviour of an object

MUTEX

for the data types of uint8 uint64 int8 and int64 
the limit for each of them are 2^8 - 1 i.e (0 - 255)
if for a variable of type uint8 is declared and initialized with the value 256 it throws an error saying the limit is out of bound...
same goes with every other datatype...

if the variable is initialized and not declared any value to it. it throws a default value of 0
for string it does not throw any error gives an empty line.......

implicit type of data types
let say if we initialized a var without the datatype and declared a var with the value "abcd" go assumes it as a string.. 
with the same var name if we try to assign another value it throws an   error..


without using the var keyword we can declare a var using " := " operatoronly inside the main function

outside the main function we need to use var keyword..

there is no try catch block kind of feature in go
instead there is a conept called as  [ ,ok ]  (some call err ok) which behaves similar to try catch block

in I/o if there is no error, it prints <nil> instead of neglecting in any other languages....


standard time for date formatting - 01-01-2006

significance of go env commnand. execute go env in the root folder. 
go mod should be there....

MEMORY MANAGEMENT - pkg.go.dev/runtime

* garbage collection happens automatically
* anything out of scope becomes nil

memory allocation & deallocation happens automatically...

two methods

new ()
   allocate memory but not initialized
   we will get a memory address
   zeroed storage

make()
allocate memory and initialized
will get a memory address
non-zeroed storage

**fmt stands for format** 
-----------------------------------------------------------
%d - integers
%b - binary
%x - hexadecimal
%s - strings
%t - booleans
%v - values of any type - default format (?)
%T - for the type of value (returns the datatype of var)
-----------------------------------------------------------
string interpolation:
process of evaluating a string literal containing one or more placeholders,
yielding a result in which the placeholders are replaced with their corresponding values
line 336 - 342 does the same


in golang we cannot take a value that is float32 and store  it in a var that is declared to hold a value of float64

the act of constructing a struct which is a composite type is known as composition
many different types into one structure which composes of those different types together into that one ds - its a ds which holds values of many diiferent types(wtf does this sentence mean)...


when a program needs to store large amounts of data or data with a longer lifetime than stack it must use the heap..
misssed about go  routine from while editor got stuck need to re learn about go routine from L63 or L64

go runtime provides automatic memory management for both the struct and the heap making it easy to write and scalable concurrent programs....

GO COMPILER is a program that translates go src code into machine readable binary code that can be executed by a compiler
go compiler is responsible for several tasks including
- parsing
        compiler reads the src code and breaks it down into a series of tokens which are analyzed by the syntax errors..
- type checking
        compiler checks that the types of var and expressions in the code are consistent and correct according to the rules of golang
- optimization
        runs optimizations to the code to make the code more efficient

*** PROGRAM EXECUTION IN GO****
 complete program is created by linking a single unimported package called the main package with all the packages it imports...

the main package must have the package main and declare a function main
that takes no arguments and returns no value...

func main() {
fmt.Println(" hello this is golang")
}

program execution begins by initializing the main package and then invoking the function main..
when that invocation returns the program exits.. it does not wait for other goroutines to complete....


comparison operators

== equal
!= not equal
< less
<= les than or equal
> greater
>= greater than equal...

logical operators..

&& AND
||or
! NOT

--------------------------
condition     | result
--------------------------
true && true  | true
true && false | false
true || true  | true
true || false | true
!true 	      | false
-------------------------

&& requires both of them true to run

|| requires one of them to be true to run..


SELECT STATEMENT:
used when writing concurrency codes
a select statement chooses which of a set of possible send or recieve operations will proceed
SELECT statement looks similar to a switch statement but with the cases all referring to communication operations

CONCURRENCY 
 refers to to code that is written in a concurrent design pattern 
 which means the code has the potential ability to execute multiple tasks simultaneously 
 where each task may make progress independently of others...


in go concurrency is achieved using go routines, 
lightweight threads of execution that are managed in go routine..
- a go program an create many go routines that run concurrently each performing a different task
- communication and synchronization of these go routines is done using   
  channels which provide a way fofr go routine to exchange data and coordinate their execution..

RACE-CONDITION
	a race condition in concurrent programming is 
	when you have shared variables and the rewrite gets 
	screwed up because of having different routines
	accessing those simultaneously 

**LOOPS**

--FOR statement-
there are three ways we can use loops in GO for the FOR keyword
- for init; condition; post{}
- for condition {}
- for {}
keywords
- break
- continue

the go for loop is ~ but not same as For loops in C
unifies for and while and there is no do while

there are loop forms only one has semicolon...
 form 1

like a C for
for init; condition; post{}

like a c while
for condition {}

//like a C for {; ;}
for{}

***NESTED-LOOPS***

- used to repeat a set of instructions multiple times
- consists of one loop inside another loop
in a nested loop
- outer loop is executed first
- for each iteration of the outer loop the inner loop is executed completely
- inner loops executes its set of instructions for every iteration of the outer loop

nested loops are commonly used when working with multi dimensional ds such as arrays or matrices..
 nested loops can also be used for tasks that require performing a specific action for every combination of two or more variables...
------------------------------------------------------
outer loop => i :=0; i <3; i++
inner loop => j :=0; j <5; j++
 
outer loop condition zero
entire condition of inner loop - 0 1 2 3 4
outer loop condition one
entire condition of inner loop - 0 1 2 3 4
outer loop condition two
entire condition of inner loop - 0 1 2 3 4
----------------------------------------------------

MAPS will not return things in any particular order...
range url : go.dev/doc/effective_go/for

*****GO-MOD*****

dependency management is the process of identifying, organizing and resolving the external code libraries and packages that a software application or project depends upon....

dependency management ensures that all required libraries and packages are available and compatible with each other

any updates/changes to those dependencies are managed and controlled to prevent issues that could arise due to conflictiong versions or changes

tools for managing dependencies in programming:

npm - nodejs
pip - python
maven - java
*****************

in go we create modules
 modules have packages

modules are pushed to git repository

namespacing
-- domain/username/repo

dependency management problem - RUSS COX ?

installing packages?
-- go mod init <module-name>

rewatch L44: regarding sphagetti code and modular code/structured programming


**GENERICS**
	generics allows to abstract code

